// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LoggingChannel {
  id        String   @id @default(cuid())
  guildId   String   @unique
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationRole {
  id        String   @id @default(cuid())
  guildId   String   @unique
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubWebhook {
  id          String   @id @default(cuid())
  guildId     String
  repository  String
  channelId   String
  events      String   @default("all")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([guildId, repository])
}

model Warning {
  id           String   @id @default(cuid())
  guildId      String
  userId       String
  moderatorId  String
  reason       String
  anonymous    Boolean  @default(true)
  dmSent       Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([guildId, userId])
}

model StarboardMessage {
  id                String   @id @default(cuid())
  guildId           String
  channelId         String
  messageId         String
  authorId          String
  starboardMessageId String?
  content           String?
  stars             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([guildId, messageId])
  @@index([guildId, stars])
}

model StarboardConfig {
  id              String   @id @default(cuid())
  guildId         String   @unique
  channelId       String
  threshold       Int      @default(3)
  emoji           String   @default("‚≠ê")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// New model for storing user points
model UserPoints {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
  @@index([guildId, points(sort: Desc)])
}

// Add these models after the UserPoints model
model UserVoiceSession {
  id            String   @id @default(cuid())
  guildId       String
  userId        String
  channelId     String
  joinedAt      DateTime @default(now())
  leftAt        DateTime?
  duration      Int?     @default(0) // Duration in seconds
  xpAwarded     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([guildId, userId])
  @@index([guildId, channelId])
}

model MediaSubmission {
  id            String   @id @default(cuid())
  guildId       String
  userId        String
  channelId     String
  messageId     String
  mediaType     String   // image, video, etc.
  xpAwarded     Boolean  @default(true)
  xpAmount      Int      @default(5)
  createdAt     DateTime @default(now())

  @@unique([guildId, messageId])
  @@index([guildId, userId])
}

model XpConfig {
  id                  String   @id @default(cuid())
  guildId             String   @unique
  voiceXpEnabled      Boolean  @default(true)
  voiceXpPerMinute    Int      @default(1)
  voiceXpCooldown     Int      @default(5) // Minutes between XP awards
  mediaXpEnabled      Boolean  @default(true)
  mediaXpAmount       Int      @default(5)
  mediaXpCooldown     Int      @default(60) // Minutes between media XP awards
  mediaChannels       String[] @default([])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// New model for storing guild points settings
model PointsConfig {
  id              String   @id @default(cuid())
  guildId         String   @unique
  enabled         Boolean  @default(true)
  moderatorRoles  String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Existing models below
model PendingGithubEvent {
  id          String   @id @default(cuid())
  repository  String
  eventType   String
  payload     String   @db.Text  // JSON payload stored as text
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([repository, processed])
}

model User {
  id            String   @id
  username      String
  avatar        String?
  accessToken   String
  refreshToken  String
  tokenExpires  DateTime
  lastLogin     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
